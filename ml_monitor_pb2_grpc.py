# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import ml_monitor_pb2 as ml__monitor__pb2


class MLServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetStatus = channel.unary_unary(
                '/MLService/GetStatus',
                request_serializer=ml__monitor__pb2.StatusRequest.SerializeToString,
                response_deserializer=ml__monitor__pb2.StatusResponse.FromString,
                )
        self.UploadData = channel.unary_unary(
                '/MLService/UploadData',
                request_serializer=ml__monitor__pb2.DataUploadRequest.SerializeToString,
                response_deserializer=ml__monitor__pb2.DataUploadResponse.FromString,
                )
        self.Inference = channel.unary_unary(
                '/MLService/Inference',
                request_serializer=ml__monitor__pb2.InferenceRequest.SerializeToString,
                response_deserializer=ml__monitor__pb2.InferenceResponse.FromString,
                )


class MLServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetStatus(self, request, context):
        """API: Get status of ML system:
        Request:
        token
        Return: 
        status: ML System status
        - training: The ML model is currently undergoing training on new data or fine-tuning its parameters.
        - testing: The ML model is being tested on a test dataset to assess its performance.
        - staging: The ML system is deployed in a staging environment for final testing before production deployment.
        - active: The ML system is deployed and actively serving predictions in production.
        - inactive: The ML system is not currently deployed or in use.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadData(self, request, context):
        """API: Upload raw data into ML system:
        Request: 
        token
        data: raw data in bytes (files) or base64
        Return: 
        status:
        - ok: 
        - failed:
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Inference(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MLServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStatus,
                    request_deserializer=ml__monitor__pb2.StatusRequest.FromString,
                    response_serializer=ml__monitor__pb2.StatusResponse.SerializeToString,
            ),
            'UploadData': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadData,
                    request_deserializer=ml__monitor__pb2.DataUploadRequest.FromString,
                    response_serializer=ml__monitor__pb2.DataUploadResponse.SerializeToString,
            ),
            'Inference': grpc.unary_unary_rpc_method_handler(
                    servicer.Inference,
                    request_deserializer=ml__monitor__pb2.InferenceRequest.FromString,
                    response_serializer=ml__monitor__pb2.InferenceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MLService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MLService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MLService/GetStatus',
            ml__monitor__pb2.StatusRequest.SerializeToString,
            ml__monitor__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MLService/UploadData',
            ml__monitor__pb2.DataUploadRequest.SerializeToString,
            ml__monitor__pb2.DataUploadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Inference(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MLService/Inference',
            ml__monitor__pb2.InferenceRequest.SerializeToString,
            ml__monitor__pb2.InferenceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
